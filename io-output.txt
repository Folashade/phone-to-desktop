   info  - socket.io started
{ server: 
   { _connections: 0,
     connections: [Getter/Setter],
     allowHalfOpen: true,
     _handle: null,
     _events: 
      { request: [Function],
        connection: [Function: connectionListener],
        error: [Function],
        upgrade: [Function],
        close: [Function],
        listening: [Object] },
     httpAllowHalfOpen: false },
  namespaces: 
   { '': 
      { manager: [Circular],
        name: '',
        sockets: {},
        auth: false,
        flags: [Object],
        _events: [Object] } },
  sockets: 
   { manager: [Circular],
     name: '',
     sockets: {},
     auth: false,
     flags: { endpoint: '', exceptions: [] },
     _events: { connection: [Object] } },
  _events: 
   { 'set:transports': [ [Function], [Function] ],
     'set:store': [Function],
     'set:origins': [Function],
     'set:flash policy port': [Function],
     'set:flash policy server': [Function] },
  settings: 
   { origins: '*:*',
     log: true,
     store: { options: undefined, clients: {}, manager: [Circular] },
     logger: { colors: true, level: 3, enabled: true },
     static: { manager: [Circular], cache: {}, paths: [Object] },
     heartbeats: true,
     resource: '/socket.io',
     transports: [ 'websocket', 'htmlfile', 'xhr-polling', 'jsonp-polling' ],
     authorization: false,
     blacklist: [ 'disconnect' ],
     'log level': 3,
     'log colors': true,
     'close timeout': 60,
     'heartbeat interval': 25,
     'heartbeat timeout': 60,
     'polling duration': 20,
     'flash policy server': true,
     'flash policy port': 10843,
     'destroy upgrade': true,
     'destroy buffer size': 100000000,
     'browser client': true,
     'browser client cache': true,
     'browser client minification': false,
     'browser client etag': false,
     'browser client expires': 315360000,
     'browser client gzip': false,
     'browser client handler': false,
     'client store expiration': 15,
     'match origin protocol': false },
  handshaken: {},
  connected: {},
  open: {},
  closed: {},
  rooms: {},
  roomClients: {},
  oldListeners: 
   [ { [Function: app]
       use: [Function],
       handle: [Function],
       listen: [Function],
       setMaxListeners: [Function],
       emit: [Function],
       addListener: [Function],
       on: [Function],
       once: [Function],
       removeListener: [Function],
       removeAllListeners: [Function],
       listeners: [Function],
       route: '/',
       stack: [Object],
       init: [Function],
       defaultConfiguration: [Function],
       engine: [Function],
       param: [Function],
       set: [Function],
       path: [Function],
       enabled: [Function],
       disabled: [Function],
       enable: [Function],
       disable: [Function],
       configure: [Function],
       get: [Function],
       post: [Function],
       put: [Function],
       head: [Function],
       delete: [Function],
       options: [Function],
       trace: [Function],
       copy: [Function],
       lock: [Function],
       mkcol: [Function],
       move: [Function],
       propfind: [Function],
       proppatch: [Function],
       unlock: [Function],
       report: [Function],
       mkactivity: [Function],
       checkout: [Function],
       merge: [Function],
       'm-search': [Function],
       notify: [Function],
       subscribe: [Function],
       unsubscribe: [Function],
       patch: [Function],
       all: [Function],
       del: [Function],
       render: [Function],
       request: {},
       response: {},
       cache: {},
       settings: [Object],
       engines: {},
       _events: [Object],
       _router: [Object],
       routes: [Object],
       router: [Getter],
       locals: [Object],
       _usedRouter: true } ],
  sequenceNumber: -494897912 }
Success reading file:  data.txt

